datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password  Password?
  topics    Topic[]
  comments  Comment[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Topic {
  id    String @id @default(cuid())
  title String @unique
  description String? @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  author    User   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String

  choices Choice[]
  comments Comment[]
}

model Choice {
  id    Int @id @default(autoincrement())
  body  String
  votes Int       @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  topic   Topic   @relation(fields: [topicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  topicId String
  
  comments Comment[]
}

model Comment {
  id        String @id @default(cuid())
  body      String
  votes     Int @default(0)
  author    User   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String

  topic     Topic   @relation(fields: [topicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  topicId   String
  
  choice    Choice? @relation(fields: [choiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  choiceId  Int?

  children  Comment[] @relation("Comment_children")

  parent    Comment? @relation("Comment_children", fields: [parentId], references: [id])
  parentId  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}